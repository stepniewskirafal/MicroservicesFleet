server:
  port: ${PORT:8081}

spring:
  application:
    name: starport-registry

  task:
    scheduling:
      pool:
        size: 1
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/starports}
    username: ${DB_USER:postgres}
    password: ${DB_PASS:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none #validate
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        use_sql_comments: true
        hibernate.id.optimizer.pooled.preferred: pooled-lo

  cloud:
    discovery:
      enabled: true

    stream:
      defaultBinder: kafka

      # === BINDINGS (producenci) ===
      bindings:
        reservationCreated-out-0:
          destination: starport.reservations
          contentType: application/json
          producer:
            partitionKeyExpression: headers['partitionKey']
            partitionCount: 3
        tariffCalculated-out-0:
          destination: starport.tariffs
          contentType: application/json
        routeChanged-out-0:
          destination: starport.route-changes
          contentType: application/json

      # === KAFKA-SPECYFICZNE ===
      kafka:
        binder:
          brokers: ${KAFKA_BROKERS:localhost:9092}
          # Binder może tworzyć tematy (niezależnie od ustawienia brokera).
          autoCreateTopics: true
          # Nie doda partycji, jeśli istniejący topic ma ich mniej niż oczekuje aplikacja.
          autoAddPartitions: false

  flyway:
    enabled: true
    locations: classpath:db/migration

telemetry:
  adapter: stream  # przełącznik adaptera TelemetryPort: stream | kafka

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka}
  instance:
    instance-id: ${spring.application.name}:${spring.cloud.client.hostname:${HOSTNAME:unknown}}:${server.port}
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: [ "health", "info", "prometheus" ]
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}

app:
  events:
    topics:
      # To są NAZWY BINDINGÓW (do StreamBridge), nie tematy Kafki.
      reservations: reservationCreated-out-0
      tariffs:      tariffCalculated-out-0
      routeChanges: routeChanged-out-0

outbox:
  poll-interval-ms: 1000

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace