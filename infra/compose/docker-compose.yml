services:
  eureka:
    build:
      context: ../../
      dockerfile: eureka-server/Dockerfile
    container_name: eureka
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8761/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: zipkin
    ports:
      - "9411:9411"
    # prosto: bez healthchecka (Zipkin jest lekki i szybki)

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus:ro
    ports:
      - "9090:9090"

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: starports
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d starports"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  kafka:
    image: apache/kafka:3.7.0   # możesz też użyć :latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_NUM_PARTITIONS: 1

  starport-registry:
    build:
      context: ../../
      dockerfile: starport-registry/Dockerfile
    container_name: starport-registry
    depends_on:
      eureka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      zipkin:
        condition: service_started
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
